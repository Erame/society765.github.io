<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The site of random C code</title>
    <link>https://society765.github.io/</link>
    <description>Recent content on The site of random C code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Mar 2020 00:10:02 -0800</lastBuildDate>
    
	<atom:link href="https://society765.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2020 03 03</title>
      <link>https://society765.github.io/posts/2020-03-03/</link>
      <pubDate>Tue, 03 Mar 2020 00:10:02 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-03-03/</guid>
      <description>/* Seed: -298544392 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int16_t s_0 = 0xDF84; int64_t li_1 = 0xD593F62E401106E4; /* Function prototypes */ uint64_t func_1(int16_t s_2); int32_t func_0(); uint64_t func_1(int16_t s_2) { int64_t *ptr_3 = &amp;amp;li_1; } int32_t func_0() { int64_t *ptr_2 = &amp;amp;li_1; uint16_t us_3 = 0x0B60; li_1 /= func_1((((0xEC74CAEA &amp;lt;= *ptr_2) ? (s_0 &amp;amp;&amp;amp; *ptr_2) : (*ptr_2 &amp;lt;= 0x0)) - ((s_0 / li_1) == (0x84 || li_1)))); *ptr_2 &amp;amp;= ((((0x1B0B !</description>
    </item>
    
    <item>
      <title>2020 03 02</title>
      <link>https://society765.github.io/posts/2020-03-02/</link>
      <pubDate>Mon, 02 Mar 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-03-02/</guid>
      <description>/* Seed: 825754757 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int16_t s_0 = 0xC7CB; uint64_t uli_1 = 0x52894D27F593D8DB; uint8_t uc_2 = 0x0; uint8_t uc_3 = 0x0; /* Function prototypes */ int16_t func_0(); int16_t func_0() { int16_t *ptr_4 = &amp;amp;s_0; } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 03 01</title>
      <link>https://society765.github.io/posts/2020-03-01/</link>
      <pubDate>Sun, 01 Mar 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-03-01/</guid>
      <description>/* Seed: -1130783618 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int8_t c_0 = 0xD5; int16_t s_1 = 0xDF54; uint16_t us_2 = 0x0; int8_t c_3 = 0x62; uint8_t uc_4 = 0x94; int32_t i_5 = 0x13003885; int8_t c_6 = 0xDD; /* Function prototypes */ int64_t func_0(); int64_t func_0() { uint8_t *ptr_7 = &amp;amp;uc_4; int8_t c_8 = 0x1A; } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 29</title>
      <link>https://society765.github.io/posts/2020-02-29/</link>
      <pubDate>Sat, 29 Feb 2020 00:10:02 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-29/</guid>
      <description>/* Seed: 1785030088 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int8_t c_0 = 0xAC; int8_t c_1 = 0x0; /* Function prototypes */ uint64_t func_1(uint16_t us_2, uint16_t us_3); uint8_t func_0(); uint64_t func_1(uint16_t us_2, uint16_t us_3) { uint16_t *ptr_4 = &amp;amp;us_3; int64_t li_5 = 0x0; if((c_0 += (us_3 = ((li_5 &amp;lt;= us_3) || (0x0 ^ c_0))))) { for(c_1 = -28; c_1 &amp;lt;= 57; c_1 += 1) { int8_t *ptr_6 = &amp;amp;c_1; } for(li_5 = -25; li_5 &amp;lt;= 79; li_5 += 1) { if(((((*ptr_4 * c_1) | (0x1D42 ^ 0x0)) | ((c_1 || us_2) ^ (c_0 &amp;gt;= us_2))) == (((us_2 / *ptr_4) | (*ptr_4 /= li_5)) &amp;lt; ((us_3 = li_5) ^ (0x116D0474 | 0x0))))) { if((((li_5 %= (li_5 - us_2)) !</description>
    </item>
    
    <item>
      <title>2020 02 28</title>
      <link>https://society765.github.io/posts/2020-02-28/</link>
      <pubDate>Fri, 28 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-28/</guid>
      <description>/* Seed: 1293465398 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint32_t ui_0 = 0xB38C975C; int64_t li_1 = 0xF57140DDEE40C3EC; uint16_t us_2 = 0x5930; int32_t i_3 = 0x0; int32_t i_4 = 0x3229A1E1; uint16_t us_5 = 0x2000; uint64_t uli_6 = 0x0; uint8_t uc_7 = 0x0; uint64_t uli_8 = 0x0; uint64_t uli_9 = 0x1CC4D8F9E2B0C52A; /* Function prototypes */ int8_t func_1(); uint64_t func_0(); int8_t func_1() { uint8_t uc_10 = 0x69; uint64_t *ptr_11 = &amp;amp;uli_6; for(i_4 = -1; i_4 &amp;lt;= 53; i_4 += 1) { uint16_t us_12 = 0x0; us_5 = ((((0x0 &amp;lt;= 0x93746412) || (0x97E3 &amp;gt; us_12)) * (us_5 ^= (us_12 &amp;gt; 0xF696))) ^ (((0xE1 ?</description>
    </item>
    
    <item>
      <title>2020 02 27</title>
      <link>https://society765.github.io/posts/2020-02-27/</link>
      <pubDate>Thu, 27 Feb 2020 00:10:02 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-27/</guid>
      <description>/* Seed: 170814215 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int16_t s_0 = 0xF43B; uint16_t us_1 = 0x0; uint8_t uc_2 = 0x0; int64_t li_3 = 0x0; int64_t li_4 = 0x85CE8655F821ADE0; uint8_t uc_5 = 0xA9; int32_t i_6 = 0x0; /* Function prototypes */ int32_t func_0(); int32_t func_0() { uint32_t ui_7 = 0x2B2038C1; } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 26</title>
      <link>https://society765.github.io/posts/2020-02-26/</link>
      <pubDate>Wed, 26 Feb 2020 00:10:02 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-26/</guid>
      <description>/* Seed: 2108858366 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint32_t ui_0 = 0x0; int64_t li_1 = 0xEBBB0E951D817C01; uint16_t us_2 = 0xEE30; uint32_t ui_3 = 0xDCB2C15B; uint32_t ui_4 = 0x6DEF20CA; uint8_t uc_5 = 0x61; uint32_t ui_6 = 0x43084501; int16_t s_7 = 0x4EC9; /* Function prototypes */ uint16_t func_1(uint8_t uc_8, int16_t s_9, int64_t li_10); uint8_t func_0(); uint16_t func_1(uint8_t uc_8, int16_t s_9, int64_t li_10) { int16_t s_11 = 0x8B32; for(li_1 = 20; li_1 &amp;lt;= 84; li_1 += 1) { if(((((0x129BC160 ^ uc_5) == (ui_4 &amp;amp;&amp;amp; uc_5)) &amp;lt;= (ui_4 -= (uc_8 += 0x0))) &amp;amp; (s_9 -= ((s_11 ?</description>
    </item>
    
    <item>
      <title>2020 02 25</title>
      <link>https://society765.github.io/posts/2020-02-25/</link>
      <pubDate>Tue, 25 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-25/</guid>
      <description>/* Seed: -1101344960 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint16_t us_0 = 0x0; uint64_t uli_1 = 0x60A655EF32C46D80; int64_t li_2 = 0x0; int16_t s_3 = 0x0; uint16_t us_4 = 0x59C0; uint32_t ui_5 = 0xB5D2578A; uint32_t ui_6 = 0xA0964F3C; /* Function prototypes */ int8_t func_0(); int8_t func_0() { int16_t s_7 = 0x0; uint32_t *ptr_8 = &amp;amp;ui_5; } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 24</title>
      <link>https://society765.github.io/posts/2020-02-24/</link>
      <pubDate>Mon, 24 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-24/</guid>
      <description>/* Seed: 1742374190 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int16_t s_0 = 0x0; int16_t s_1 = 0x3001; int64_t li_2 = 0x3A319413865C3BAD; /* Function prototypes */ uint8_t func_0(); uint8_t func_0() { int64_t *ptr_3 = &amp;amp;li_2; int16_t *ptr_4 = &amp;amp;s_0; ptr_4 = ptr_4; ptr_3 = ptr_3; } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 23</title>
      <link>https://society765.github.io/posts/2020-02-23/</link>
      <pubDate>Sun, 23 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-23/</guid>
      <description>/* Seed: 2033362312 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int32_t i_0 = 0x2F63EB3C; uint64_t uli_1 = 0x0; int64_t li_2 = 0xF6966647A0E69184; uint16_t us_3 = 0xDD33; uint8_t uc_4 = 0xE4; int64_t li_5 = 0x44B3A491AD85D7B7; int8_t c_6 = 0xB3; uint64_t uli_7 = 0x1BB2C96A7AE2D967; int16_t s_8 = 0x0; int32_t i_9 = 0x62919244; /* Function prototypes */ uint32_t func_1(int64_t li_10); uint32_t func_0(); uint32_t func_1(int64_t li_10) { int32_t *ptr_11 = &amp;amp;i_9; int32_t *ptr_12 = &amp;amp;i_0; } uint32_t func_0() { uint8_t *ptr_10 = &amp;amp;uc_4; int8_t c_11 = 0x32; li_5 = (func_1((i_0 /= (uli_7 &amp;lt;= uc_4))) / (((0x0 ?</description>
    </item>
    
    <item>
      <title>2020 02 22</title>
      <link>https://society765.github.io/posts/2020-02-22/</link>
      <pubDate>Sat, 22 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-22/</guid>
      <description>/* Seed: 1944646108 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int32_t i_0 = 0x6B9C6A98; int32_t i_1 = 0x7594E380; uint16_t us_2 = 0x0; uint16_t us_3 = 0xBFA8; uint8_t uc_4 = 0x1D; uint8_t uc_5 = 0x8A; int32_t i_6 = 0x0; int32_t i_7 = 0x71EF6834; uint16_t us_8 = 0x4790; int64_t li_9 = 0x0; /* Function prototypes */ int16_t func_1(uint32_t ui_10, int8_t c_11, uint64_t uli_12, int8_t c_13); uint64_t func_0(); int16_t func_1(uint32_t ui_10, int8_t c_11, uint64_t uli_12, int8_t c_13) { int32_t *ptr_14 = &amp;amp;i_0; } uint64_t func_0() { int8_t c_10 = 0xE5; int8_t *ptr_11 = &amp;amp;c_10; for(uc_5 = 17; uc_5 &amp;lt;= 49; uc_5 += 1) { if(((((uc_4 &amp;amp;&amp;amp; uc_4) * (0x0 &amp;amp; 0x0)) !</description>
    </item>
    
    <item>
      <title>2020 02 21</title>
      <link>https://society765.github.io/posts/2020-02-21/</link>
      <pubDate>Fri, 21 Feb 2020 00:10:02 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-21/</guid>
      <description>/* Seed: 265572653 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint64_t uli_0 = 0xE3DBD832609F1974; uint16_t us_1 = 0x54FF; int8_t c_2 = 0x66; int32_t i_3 = 0xEBBCF87C; int8_t c_4 = 0xE7; /* Function prototypes */ int32_t func_1(uint16_t us_5, int16_t s_6, uint64_t uli_7); int16_t func_0(); int32_t func_1(uint16_t us_5, int16_t s_6, uint64_t uli_7) { int8_t *ptr_8 = &amp;amp;c_4; us_5 |= (c_4 = (s_6 /= (*ptr_8 -= (c_4 ^ uli_0)))); if(((s_6 *= ((us_5 &amp;amp;&amp;amp; c_4) || (us_1 &amp;gt;= c_2))) &amp;amp; (((s_6 || uli_7) == (0x0 &amp;amp;&amp;amp; 0x0)) | (us_1 |= (c_2 / c_4))))) { uint16_t *ptr_9 = &amp;amp;us_5; if(((us_1 += ((us_1 &amp;amp;= uli_0) ?</description>
    </item>
    
    <item>
      <title>2020 02 20</title>
      <link>https://society765.github.io/posts/2020-02-20/</link>
      <pubDate>Thu, 20 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-20/</guid>
      <description>/* Seed: -264527929 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int8_t c_0 = 0x0; /* Function prototypes */ int16_t func_0(); int16_t func_0() { int32_t i_1 = 0xA72D2B0D; int64_t li_2 = 0xB5B8613EB6F7404E; for(c_0 = -17; c_0 &amp;lt;= 33; c_0 += 1) { } } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 19</title>
      <link>https://society765.github.io/posts/2020-02-19/</link>
      <pubDate>Wed, 19 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-19/</guid>
      <description>/* Seed: -2031413446 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int64_t li_0 = 0xE8C5BC9E8F4CC535; int16_t s_1 = 0x7A70; uint16_t us_2 = 0x9F42; /* Function prototypes */ uint64_t func_1(int8_t c_3); uint16_t func_0(); uint64_t func_1(int8_t c_3) { int64_t li_4 = 0x36F6885CB0779AF8; } uint16_t func_0() { uint8_t uc_3 = 0x8E; func_1(((li_0 &amp;amp;= (us_2 *= (us_2 &amp;lt;= s_1))) ? (((s_1 == 0x24) &amp;amp;&amp;amp; (li_0 ^= us_2)) % ((us_2 -= 0x9C5CF628) == (s_1 = s_1))) : (((s_1 || li_0) ?</description>
    </item>
    
    <item>
      <title>2020 02 18</title>
      <link>https://society765.github.io/posts/2020-02-18/</link>
      <pubDate>Tue, 18 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-18/</guid>
      <description>/* Seed: -28465745 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint64_t uli_0 = 0x9AE8575FC770CE86; uint64_t uli_1 = 0xF798E21B0867A018; int8_t c_2 = 0x0; int8_t c_3 = 0x0; uint32_t ui_4 = 0x4CC0B462; int16_t s_5 = 0x9BE7; uint32_t ui_6 = 0x2D884285; int16_t s_7 = 0xBAD1; /* Function prototypes */ int64_t func_0(); int64_t func_0() { int8_t *ptr_8 = &amp;amp;c_2; int8_t c_9 = 0x8A; } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 17</title>
      <link>https://society765.github.io/posts/2020-02-17/</link>
      <pubDate>Mon, 17 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-17/</guid>
      <description>/* Seed: -1063156307 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int8_t c_0 = 0x0; uint16_t us_1 = 0x46D3; uint8_t uc_2 = 0x33; uint32_t ui_3 = 0x0CB8704D; uint16_t us_4 = 0x6075; int32_t i_5 = 0xDD20176E; int16_t s_6 = 0x6DB4; int64_t li_7 = 0x014719442B4A01EE; int64_t li_8 = 0xEF75D2D3F8764779; /* Function prototypes */ int64_t func_0(); int64_t func_0() { uint16_t us_9 = 0x0; int64_t li_10 = 0xEE3CC1DB040D6D06; for(us_4 = 30; us_4 &amp;lt;= 57; us_4 += 1) { int32_t i_11 = 0x1A9FC8DF; } } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 16</title>
      <link>https://society765.github.io/posts/2020-02-16/</link>
      <pubDate>Sun, 16 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-16/</guid>
      <description>/* Seed: 317034486 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint32_t ui_0 = 0x0; int32_t i_1 = 0x0; uint16_t us_2 = 0x0; int64_t li_3 = 0x34112D18C0EEBB9D; int16_t s_4 = 0x9609; int16_t s_5 = 0x0; int8_t c_6 = 0x63; int8_t c_7 = 0x0; uint16_t us_8 = 0x8C5A; /* Function prototypes */ int16_t func_1(); int16_t func_0(); int16_t func_1() { uint16_t *ptr_9 = &amp;amp;us_2; for(s_5 = -8; s_5 &amp;lt;= 35; s_5 += 1) { if(((((s_5 == li_3) !</description>
    </item>
    
    <item>
      <title>2020 02 15</title>
      <link>https://society765.github.io/posts/2020-02-15/</link>
      <pubDate>Sat, 15 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-15/</guid>
      <description>/* Seed: 1307841800 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint8_t uc_0 = 0x9C; int16_t s_1 = 0x0; uint16_t us_2 = 0x9C49; /* Function prototypes */ uint64_t func_1(uint16_t us_3, int8_t c_4, uint64_t uli_5); uint8_t func_0(); uint64_t func_1(uint16_t us_3, int8_t c_4, uint64_t uli_5) { uint8_t uc_6 = 0x0; uint8_t *ptr_7 = &amp;amp;uc_6; if((((us_3 += (uli_5 &amp;gt;= *ptr_7)) * (c_4 %= (0x2FA733E6 || uli_5))) || (s_1 -= ((c_4 &amp;lt;= uli_5) &amp;amp; (us_3 |= uc_0))))) { uint64_t *ptr_8 = &amp;amp;uli_5; if(((((uc_0 / uli_5) ?</description>
    </item>
    
    <item>
      <title>2020 02 14</title>
      <link>https://society765.github.io/posts/2020-02-14/</link>
      <pubDate>Fri, 14 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-14/</guid>
      <description>/* Seed: 822957115 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int32_t i_0 = 0x13D0104C; uint64_t uli_1 = 0xD5D3C8007AD2C29C; uint16_t us_2 = 0x0; uint32_t ui_3 = 0xDE3AE4A2; int8_t c_4 = 0xBE; uint64_t uli_5 = 0x131238C0A82346D1; int64_t li_6 = 0x0; int8_t c_7 = 0x4E; int64_t li_8 = 0x1E0CC74EB50EECF8; /* Function prototypes */ int32_t func_1(); int32_t func_0(); int32_t func_1() { int32_t *ptr_9 = &amp;amp;i_0; int16_t s_10 = 0x236C; ptr_9 = &amp;amp;uli_5; if(((s_10 = (ui_3 ^= (0x8F82 ?</description>
    </item>
    
    <item>
      <title>2020 02 13</title>
      <link>https://society765.github.io/posts/2020-02-13/</link>
      <pubDate>Thu, 13 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-13/</guid>
      <description>/* Seed: 1754568793 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int32_t i_0 = 0x0; uint32_t ui_1 = 0x0; uint64_t uli_2 = 0x0; uint8_t uc_3 = 0x0; int32_t i_4 = 0x0; uint16_t us_5 = 0x169B; /* Function prototypes */ uint64_t func_1(int64_t li_6, int64_t li_7, int32_t i_8, int64_t li_9); int16_t func_0(); uint64_t func_1(int64_t li_6, int64_t li_7, int32_t i_8, int64_t li_9) { int64_t *ptr_10 = &amp;amp;li_6; } int16_t func_0() { uint64_t *ptr_6 = &amp;amp;uli_2; for(uli_2 = 30; uli_2 &amp;lt;= 84; uli_2 += 1) { int8_t c_7 = 0xB4; ui_1 = (func_1((c_7 += (0xC4 &amp;amp;&amp;amp; 0xF3ADF11D)), ((uli_2 | 0x0) &amp;gt;= (c_7 &amp;amp;= i_4)), (i_0 |= (i_4 * uc_3)), ((uli_2 &amp;amp;= i_0) || (i_0 * uli_2))) | (i_0 /= ((ui_1 ?</description>
    </item>
    
    <item>
      <title>2020 02 12</title>
      <link>https://society765.github.io/posts/2020-02-12/</link>
      <pubDate>Wed, 12 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-12/</guid>
      <description>/* Seed: -1976839800 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int64_t li_0 = 0x0; int16_t s_1 = 0x7967; int32_t i_2 = 0x4D4854B0; uint64_t uli_3 = 0x0; uint16_t us_4 = 0xAFD8; uint32_t ui_5 = 0x1ECF0EC7; uint64_t uli_6 = 0xFB0394BE96E0299C; uint8_t uc_7 = 0x4E; uint16_t us_8 = 0x0; int32_t i_9 = 0x4CE04633; /* Function prototypes */ int64_t func_1(uint32_t ui_10); uint8_t func_0(); int64_t func_1(uint32_t ui_10) { uint32_t ui_11 = 0xFB6D289E; uint32_t ui_12 = 0x7FB96766; if((us_4 %= (li_0 &amp;amp;= ((uli_3 ?</description>
    </item>
    
    <item>
      <title>2020 02 11</title>
      <link>https://society765.github.io/posts/2020-02-11/</link>
      <pubDate>Tue, 11 Feb 2020 00:10:01 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-11/</guid>
      <description>/* Seed: 443046202 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ uint8_t uc_0 = 0x1F; uint64_t uli_1 = 0xA57C749F06516684; uint64_t uli_2 = 0x0; uint32_t ui_3 = 0x0; int64_t li_4 = 0x3CEC6FCDB6222A7B; uint8_t uc_5 = 0x1E; int8_t c_6 = 0x41; int32_t i_7 = 0x618C8B86; int8_t c_8 = 0x64; int32_t i_9 = 0xAE4C8B71; /* Function prototypes */ int16_t func_0(); int16_t func_0() { int32_t *ptr_10 = &amp;amp;i_9; int8_t *ptr_11 = &amp;amp;c_6; } int main(void) { func_0(); return 0; }  </description>
    </item>
    
    <item>
      <title>2020 02 10</title>
      <link>https://society765.github.io/posts/2020-02-10/</link>
      <pubDate>Mon, 10 Feb 2020 00:28:39 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/2020-02-10/</guid>
      <description>/* Seed: -1629431492 */ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; /* Global variables */ int32_t i_0 = 0xDE2C84D8; /* Function prototypes */ int8_t func_1(int8_t c_1, int32_t i_2, uint16_t us_3); uint32_t func_0(); int8_t func_1(int8_t c_1, int32_t i_2, uint16_t us_3) { uint64_t uli_4 = 0xB5F7D3459833772F; int16_t s_5 = 0xAF65; i_2 /= (us_3 &amp;amp;= (((i_2 &amp;amp;&amp;amp; 0x0) || (c_1 &amp;amp;&amp;amp; us_3)) &amp;lt; (s_5 += (i_2 &amp;lt; uli_4)))); } uint32_t func_0() { int32_t *ptr_1 = &amp;amp;i_0; func_1(((*ptr_1 += (i_0 ^= (0x89C2A16D &amp;lt; *ptr_1))) &amp;gt;= ((*ptr_1 *= (*ptr_1 /= i_0)) || (*ptr_1 ^= (0x0 ?</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://society765.github.io/posts/my-first-post/</link>
      <pubDate>Sun, 09 Feb 2020 23:11:08 -0800</pubDate>
      
      <guid>https://society765.github.io/posts/my-first-post/</guid>
      <description> Hello world #include &amp;lt;stdio.h&amp;gt; int main(int argc, char** argv){ printf(&amp;quot;hello world\n&amp;quot;); return 0; }  </description>
    </item>
    
  </channel>
</rss>